<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\Traits\EloquentBinary;

class PostChecksum extends Model
{
    use EloquentBinary;

    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'post_checksums';

    /**
     * The database primary key.
     *
     * @var string
     */
    protected $primaryKey = 'post_checksum_id';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['board_uri', 'checksum'];

    /**
     * Indicates their is no autoupdated timetsamps.
     *
     * @var bool
     */
    public $timestamps = false;

    public function post()
    {
        return $this->belongsTo('\App\Board', 'board_uri');
    }

    /**
     * Returns a checksum searching by binary checksum.
     *
     * @static
     *
     * @param binary     $checksum The checksum, usually generated by Post::makeChecksum.
     * @param \App\Board $board    Optional. Board to refine search to. If null, searches site-wide. Defaults null.
     *
     * @return \App\PostChecksum
     */
    public static function getChecksum($checksum, Board $board = null)
    {
        $query = static::whereChecksum($checksum);

        if ($board instanceof Board) {
            $query->where('board_uri', $board->board_uri);
        }

        return $query->get();
    }

    /**
     * Gets our option value and unwraps it from any stream wrappers.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public function getChecksumAttribute($value)
    {
        return binary_unsql($value);
    }

    /**
     * Returns an XML valid attachment HTML string that handles missing thumbnail URLs.
     *
     * @param \App\Board $board    The board this thumbnail will belong to.
     * @param int        $maxWidth Optional. Maximum width constraint. Defaults null.
     *
     * @return string as HTML
     */
    public function getThumbnailHtml(?Board $board = null, $maxDimension = null)
    {
        dd($this);
        $ext = $this->guessExtension();
        $mime = $this->attributes['mime'];
        $url = media_url("static/img/filetypes/{$ext}.svg", false);
        $spoil = $this->isSpoiler();
        $deleted = $this->isDeleted();
        $hash = $deleted ? null : $this->attributes['hash'];
        $thumbnail = $this->thumbnails()->first();


        if ($deleted) {
            $url = $board->getAssetUrl('file_deleted');
        }
        elseif ($spoil) {
            $url = $board->getAssetUrl('file_spoiler');
        }
        elseif ($this->isImageVector()) {
            $url = $this->getUrl($board);
        }
        elseif ($this->isAudio() || $this->isImage() || $this->isVideo() || $this->isDocument()) {
            if ($thumbnail instanceof FileStorage) {
                $url = $thumbnail->getUrl($board);
            }
            elseif ($this->isAudio()) {
                $url = media_url("static/img/assets/audio.gif", false);
            }
        }

        $classHTML = $this->getThumbnailClasses();

        // Measure dimensions.
        $height = 'auto';
        $width = 'auto';
        $oHeight = $thumbnail ? $thumbnail->attributes['file_height'] : Settings::get('attachmentThumbnailSize', 250);
        $oWidth = $thumbnail ? $thumbnail->attributes['file_width'] : Settings::get('attachmentThumbnailSize', 250);

        // configuration for an actual thumbnail image
        if ($this->hasThumb() && !$this->isSpoiler() && !$this->isDeleted()) {
            $height = $oHeight.'px';
            $width = $thumbnail->attributes['file_width'].'px';

            if ($maxDimension == "auto") {
                $height = "auto";
                $width = "auto";
            }
            else if (is_int($maxDimension) && ($oWidth > $maxDimension || $oHeight > $maxDimension)) {
                if ($oWidth > $oHeight) {
                    $height = 'auto';
                    $width = $maxDimension.'px';
                }
                elseif ($oWidth < $oHeight) {
                    $height = $maxDimension.'px';
                    $width = 'auto';
                }
                else {
                    $height = $maxDimension.'px';
                    $width = $maxDimension.'px';
                }
            }
        }
        // board assets and placeholder file extension images
        else {
            $width = $maxDimension ? "{$maxDimension}px" : Settings::get('attachmentThumbnailSize', 250).'px';
            $height = 'auto';
        }

        return "<div class=\"attachment-wrapper\">" .
            "<img class=\"attachment-img {$classHTML}\" src=\"{$url}\" data-mime=\"{$mime}\" data-sha256=\"{$hash}\" style=\"height: {$height}; width: {$width};\"/>" .
        "</div>";
    }

    /**
     * Narrows results to include a specific checksum.
     *
     * @param binary|string $checksum Will automatically convert strings to binary.
     *
     * @return Collection of \App\PostChecksum
     */
    public function scopeWhereChecksum($query, $checksum)
    {
        if (!is_binary($checksum)) {
            $checksum = hex2bin($checksum);
        }

        $checksum = binary_sql($checksum);

        return $query->where('checksum', $checksum);
    }

    /**
     * Sets our option value and encodes it if required.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public function setChecksumAttribute($value)
    {
        if (!is_binary($value)) {
            $value = hex2bin($value);
        }

        $this->attributes['checksum'] = binary_sql($value);
    }
}
