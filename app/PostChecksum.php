<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\Traits\EloquentBinary;

class PostChecksum extends Model
{
    use EloquentBinary;

    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'post_checksums';

    /**
     * The database primary key.
     *
     * @var string
     */
    protected $primaryKey = 'post_checksum_id';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['board_uri', 'checksum'];

    /**
     * Indicates their is no autoupdated timetsamps.
     *
     * @var bool
     */
    public $timestamps = false;

    public function post()
    {
        return $this->belongsTo('\App\Board', 'board_uri');
    }

    /**
     * Returns a checksum searching by binary checksum.
     *
     * @static
     *
     * @param binary     $checksum The checksum, usually generated by Post::makeChecksum.
     * @param \App\Board $board    Optional. Board to refine search to. If null, searches site-wide. Defaults null.
     *
     * @return \App\PostChecksum
     */
    public static function getChecksum($checksum, Board $board = null)
    {
        $query = static::whereChecksum($checksum);

        if ($board instanceof Board) {
            $query->where('board_uri', $board->board_uri);
        }

        return $query->get();
    }

    /**
     * Gets our option value and unwraps it from any stream wrappers.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public function getChecksumAttribute($value)
    {
        return binary_unsql($value);
    }

    /**
     * Narrows results to include a specific checksum.
     *
     * @param binary|string $checksum Will automatically convert strings to binary.
     *
     * @return Collection of \App\PostChecksum
     */
    public function scopeWhereChecksum($query, $checksum)
    {
        if (!is_binary($checksum)) {
            $checksum = hex2bin($checksum);
        }

        $checksum = binary_sql($checksum);

        return $query->where('checksum', $checksum);
    }

    /**
     * Sets our option value and encodes it if required.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public function setChecksumAttribute($value)
    {
        if (!is_binary($value)) {
            $value = hex2bin($value);
        }

        $this->attributes['checksum'] = binary_sql($value);
    }
}
